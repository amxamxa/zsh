# 						Konfigurationsdatei für GitHub
# 						------------------------------
#
# Dateiname: $XDG_CONFIG_HOME/git/config
# Datei enthält globale Git-Einstellungen für den Benutzer.
#	------------------------------------------------
 # Bearbeiten der globalen Git-Konfiguration:
# 	git config --global --edit
# aktuellen Farbeinstellungen zu überprüfen:
# 	git config --global --get-regexp color
#	------------------------------------------------
# Erstellen eines neuen Branches basierend auf `origin/master`:
# 	git checkout -b feature/next-feature origin/master
# 	git branch -d master # Löschen des lokalen `master`-Branches:
#	-------------------------------------------------
# Setzt für `git pull` auf `rebase` (anstelle eines Merge):
# 	git config --global pull.rebase true
# Erstellt einen Alias für `git push origin HEAD`:
# git config --global alias.pu "git push origin HEAD" && git pu
#	__tshoot_________________________________________
#	GIT_CONFIG=/share/git/config git config --list
# 			und
#  	export GIT_CONFIG=/share/git/config
#	_________________________________________________
[user] 	# Name & E-Mail-Adresse des Git-Benutzer
	name = amxamxa
	email = max.kempter@gmail.com

[core]
    # Definiert das Format für Commit-Nachrichten in Logs
    formatCommit = %s %C(auto)%d by %an <%a> %C(auto)%cr

    # Pfad zur globalen .gitignore-Datei für das Ausschließen von Dateien
    excludesfile = "/share/git/.gitignore_global"

    # Steuert die Behandlung von Zeilenumbrüchen zwischen verschiedenen Betriebssystemen.
    # "input" bedeutet, dass Git CRLF-Zeilenumbrüche (Windows) in LF (Unix) umwandelt, wenn Dateien gepusht werden.
    autocrlf = input

    # Legt das End-of-Line-Zeichen fest. "lf" steht für Unix-Style (Line Feed).
    eol = lf

    # Bestimmt, ob Git Änderungen an Dateiberechtigungen berücksichtigen soll.
    # "false" bedeutet, dass Änderungen an Dateiberechtigungen ignoriert werden.
    fileMode = false

    # Steuert die Behandlung von Unicode-Zeichen.
    # "true" sorgt dafür, dass Git Unicode-Normalisierung berücksichtigt.
    precomposeunicode = true

    # Spezifiziert das Arbeitsverzeichnis für das Git-Repository.
    worktree = .

    # Definiert den Pager für die Anzeige von Git-Ausgaben.
    # "less -FRSX" zeigt nur den Output an, wenn dieser zu groß für den Bildschirm ist.
    pager = less -FRSX

    # Definiert den Pfad für benutzerdefinierte Git-Hooks (auskommentiert).
    # hookspath = ~/.git-hooks

    # Aktiviert die Nutzung von symbolischen Links.
    symlinks = true

    # Pfad zur globalen .gitignore-Datei
    # excludesfile = ~/.gitignore_global

[pretty]
 # Benutzerdefinierte Formatierung für Git-Logs.
 # stdout mit Commit-Hash,  Branch, Commit-Nachricht, Alter Commit und Autor
 format = "%h %C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset"

[merge]
 # Definiert das Tool für das Zusammenführen von Änderungen.
 # "colordiff" wird verwendet, um farbige Unterschiede anzuzeigen. Die verschiedenen Optionen ignorieren bestimmte Arten von Unterschieden.
 # tool = colordiff --ignore-case --ignore-tab-expansion --ignore-trailing-space --ignore-space-change --ignore-all-space --ignore-blank-lines

 # Als Alternative kann auch das Tool "meld" verwendet werden 
  tool = meld

# Farbeinstellungen für verschiedene Git-Kommandos
# [color]
#     ui = auto

[color "branch"]	# Konfiguration der Farben für Branches.
    current = yellow reverse  # Aktuelle Branch 	GELB & INVERT
    local = yellow            # Lokale Branches 	GELB
    remote = green            # Remote-Branches 	GRÜN
   

[color "diff"]  	 # Farbeinstellungen für Diffs.
    meta = yellow bold         # Meta-Informationen in 	GELB 	FETT
    frag = magenta bold        # Fragmentinformationen 	MAGENTA FETT
    old = red bold             # Alte Zeilen 			ROT 	FETT
    new = green bold           # Neue Zeilen 			GRÜN 	FETT 
    

[color "status"]     # Farbeinstellungen für Git-Status
    added = yellow             # Hinzugefügte Dateien 	GELB
    changed = green            # Geänderte Dateien 		GRÜN
    untracked = cyan           # Nicht verfolgte Datei  CYAN

[instaweb]   		# Definiert den Standardbrowser für Git-Instaweb.
      browser = w3m

[alias]
    co = checkout              # Alias für `git checkout`.
    br = branch                # Alias für `git branch`.
    ci = commit                # Alias für `git commit`.
    st = status                # Alias für `git status`.
    # Benutzerdefiniertes Log-Format, das einen grafischen Verlauf, Commit-Informationen und Farben anzeigt.
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

    # Alternative Log-Formatierung (auskommentiert).
    # lg = log --graph --decorate --all

    # Alias für `git push origin HEAD`, damit beim Pushen der aktuelle Branch auf den Remote-Branch gepusht wird.
    pu = !git push origin HEAD

[pull]	    # Setzt das Verhalten für `git pull` auf Rebase, um Merge-Commits zu vermeiden.
    rebase = true

[init]		# Definiert den Standardbranchnamen für neue Repositories.
        defaultBranch = main
    
